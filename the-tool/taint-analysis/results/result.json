[{"source":{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/lib/compare.js","region":{"start":{"line":26,"column":36},"end":{"line":26,"column":56}}},"code":"this._options.appPath"},"entryPoint":{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/test/422.js","region":{"start":{"line":8,"column":3},"end":{"line":55,"column":4}}},"code":"gm.compare(originalPathName, originalPathName, function(err, same, diff) {\n    if (err) return finish(err);\n    if (!same) {\n      const msg = `Compare should be the same! \"${same}\" \"${diff}\"`;\n      return finish(new Error(msg));\n    }\n\n    // Compare almost similar images for which ImageMagick\n    // returns an exponent-style floating point number\n    const compare1PathName = path.join(__dirname, 'fixtures', 'compare_1.png');\n    const compare2PathName = path.join(__dirname, 'fixtures', 'compare_2.png');\n\n    gm.compare(compare1PathName, compare2PathName, function(err, same, diff) {\n      if (err) return finish(err);\n      if (!same) {\n        const msg = `Compare should be the same! \"${same}\" \"${diff}\"`;\n        return finish(new Error(msg));\n      }\n\n      const noisePathName = path.join(dir, 'noise3.png');\n\n      // Create a new noisy image\n      gm.noise(0.3).write(noisePathName, function (err) {\n        if (err) return finish(err);\n\n        var options = {\n          highlightColor: '#fff',\n          file: path.join(dir, 'diff.png'),\n          tolerance: 0.001\n        };\n\n        const originalPathName = path.join(dir, 'original.jpg');\n\n        // Compare these images and write to a file.\n        gm.compare(originalPathName, noisePathName, options, function(err) {\n          if (err) return finish(err);\n\n          fs.access(options.file, fs.constants.F_OK, function(err) {\n            if (err) {\n              finish(new Error('Diff file does not exist.'));\n            } else {\n              fs.unlink(options.file, finish);\n            }\n          });\n        });\n      });\n    });\n  })","entryPoint":["require('..')","()",".options","()",".compare","()"]},"codeFlow":[{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/lib/compare.js","region":{"start":{"line":47,"column":11},"end":{"line":47,"column":23}}},"code":"appPath + bin","type":"binary","name":"Right","values":["compare"]}],"sink":{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/node_modules/cross-spawn/index.js","region":{"start":{"line":17,"column":15},"end":{"line":17,"column":67}}},"code":"cp.spawn(parsed.command, parsed.args, parsed.options)","module":"node:child_process"}},{"source":{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/lib/compare.js","region":{"start":{"line":26,"column":36},"end":{"line":26,"column":56}}},"code":"this._options.appPath"},"entryPoint":{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/test/422.js","region":{"start":{"line":8,"column":3},"end":{"line":55,"column":4}}},"code":"gm.compare(originalPathName, originalPathName, function(err, same, diff) {\n    if (err) return finish(err);\n    if (!same) {\n      const msg = `Compare should be the same! \"${same}\" \"${diff}\"`;\n      return finish(new Error(msg));\n    }\n\n    // Compare almost similar images for which ImageMagick\n    // returns an exponent-style floating point number\n    const compare1PathName = path.join(__dirname, 'fixtures', 'compare_1.png');\n    const compare2PathName = path.join(__dirname, 'fixtures', 'compare_2.png');\n\n    gm.compare(compare1PathName, compare2PathName, function(err, same, diff) {\n      if (err) return finish(err);\n      if (!same) {\n        const msg = `Compare should be the same! \"${same}\" \"${diff}\"`;\n        return finish(new Error(msg));\n      }\n\n      const noisePathName = path.join(dir, 'noise3.png');\n\n      // Create a new noisy image\n      gm.noise(0.3).write(noisePathName, function (err) {\n        if (err) return finish(err);\n\n        var options = {\n          highlightColor: '#fff',\n          file: path.join(dir, 'diff.png'),\n          tolerance: 0.001\n        };\n\n        const originalPathName = path.join(dir, 'original.jpg');\n\n        // Compare these images and write to a file.\n        gm.compare(originalPathName, noisePathName, options, function(err) {\n          if (err) return finish(err);\n\n          fs.access(options.file, fs.constants.F_OK, function(err) {\n            if (err) {\n              finish(new Error('Diff file does not exist.'));\n            } else {\n              fs.unlink(options.file, finish);\n            }\n          });\n        });\n      });\n    });\n  })","entryPoint":["require('..')","()",".options","()",".compare"]},"codeFlow":[{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/lib/compare.js","region":{"start":{"line":47,"column":11},"end":{"line":47,"column":23}}},"code":"appPath + bin","type":"binary","name":"Right","values":["compare"]}],"sink":{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/node_modules/cross-spawn/index.js","region":{"start":{"line":17,"column":15},"end":{"line":17,"column":67}}},"code":"cp.spawn(parsed.command, parsed.args, parsed.options)","module":"node:child_process"}},{"source":{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/lib/compare.js","region":{"start":{"line":26,"column":36},"end":{"line":26,"column":56}}},"code":"this._options.appPath"},"entryPoint":{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/test/422.js","region":{"start":{"line":8,"column":3},"end":{"line":55,"column":4}}},"code":"gm.compare(originalPathName, originalPathName, function(err, same, diff) {\n    if (err) return finish(err);\n    if (!same) {\n      const msg = `Compare should be the same! \"${same}\" \"${diff}\"`;\n      return finish(new Error(msg));\n    }\n\n    // Compare almost similar images for which ImageMagick\n    // returns an exponent-style floating point number\n    const compare1PathName = path.join(__dirname, 'fixtures', 'compare_1.png');\n    const compare2PathName = path.join(__dirname, 'fixtures', 'compare_2.png');\n\n    gm.compare(compare1PathName, compare2PathName, function(err, same, diff) {\n      if (err) return finish(err);\n      if (!same) {\n        const msg = `Compare should be the same! \"${same}\" \"${diff}\"`;\n        return finish(new Error(msg));\n      }\n\n      const noisePathName = path.join(dir, 'noise3.png');\n\n      // Create a new noisy image\n      gm.noise(0.3).write(noisePathName, function (err) {\n        if (err) return finish(err);\n\n        var options = {\n          highlightColor: '#fff',\n          file: path.join(dir, 'diff.png'),\n          tolerance: 0.001\n        };\n\n        const originalPathName = path.join(dir, 'original.jpg');\n\n        // Compare these images and write to a file.\n        gm.compare(originalPathName, noisePathName, options, function(err) {\n          if (err) return finish(err);\n\n          fs.access(options.file, fs.constants.F_OK, function(err) {\n            if (err) {\n              finish(new Error('Diff file does not exist.'));\n            } else {\n              fs.unlink(options.file, finish);\n            }\n          });\n        });\n      });\n    });\n  })","entryPoint":["require('..')","()",".options","()",".compare"]},"codeFlow":[{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/lib/command.js","region":{"start":{"line":226,"column":11},"end":{"line":226,"column":23}}},"code":"appPath + bin","type":"binary","name":"Right","values":["convert"]}],"sink":{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/node_modules/cross-spawn/index.js","region":{"start":{"line":17,"column":15},"end":{"line":17,"column":67}}},"code":"cp.spawn(parsed.command, parsed.args, parsed.options)","module":"node:child_process"}},{"source":{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/lib/compare.js","region":{"start":{"line":26,"column":36},"end":{"line":26,"column":56}}},"code":"this._options.appPath"},"entryPoint":{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/test/422.js","region":{"start":{"line":8,"column":3},"end":{"line":55,"column":4}}},"code":"gm.compare(originalPathName, originalPathName, function(err, same, diff) {\n    if (err) return finish(err);\n    if (!same) {\n      const msg = `Compare should be the same! \"${same}\" \"${diff}\"`;\n      return finish(new Error(msg));\n    }\n\n    // Compare almost similar images for which ImageMagick\n    // returns an exponent-style floating point number\n    const compare1PathName = path.join(__dirname, 'fixtures', 'compare_1.png');\n    const compare2PathName = path.join(__dirname, 'fixtures', 'compare_2.png');\n\n    gm.compare(compare1PathName, compare2PathName, function(err, same, diff) {\n      if (err) return finish(err);\n      if (!same) {\n        const msg = `Compare should be the same! \"${same}\" \"${diff}\"`;\n        return finish(new Error(msg));\n      }\n\n      const noisePathName = path.join(dir, 'noise3.png');\n\n      // Create a new noisy image\n      gm.noise(0.3).write(noisePathName, function (err) {\n        if (err) return finish(err);\n\n        var options = {\n          highlightColor: '#fff',\n          file: path.join(dir, 'diff.png'),\n          tolerance: 0.001\n        };\n\n        const originalPathName = path.join(dir, 'original.jpg');\n\n        // Compare these images and write to a file.\n        gm.compare(originalPathName, noisePathName, options, function(err) {\n          if (err) return finish(err);\n\n          fs.access(options.file, fs.constants.F_OK, function(err) {\n            if (err) {\n              finish(new Error('Diff file does not exist.'));\n            } else {\n              fs.unlink(options.file, finish);\n            }\n          });\n        });\n      });\n    });\n  })","entryPoint":["require('..')","()",".options","()",".compare"]},"codeFlow":[{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/lib/compare.js","region":{"start":{"line":47,"column":11},"end":{"line":47,"column":23}}},"code":"appPath + bin","type":"binary","name":"Right","values":["compare"]}],"sink":{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/node_modules/cross-spawn/index.js","region":{"start":{"line":17,"column":15},"end":{"line":17,"column":67}}},"code":"cp.spawn(parsed.command, parsed.args, parsed.options)","module":"node:child_process"}},{"source":{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/lib/compare.js","region":{"start":{"line":26,"column":36},"end":{"line":26,"column":56}}},"code":"this._options.appPath"},"entryPoint":{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/test/compare.js","region":{"start":{"line":9,"column":3},"end":{"line":47,"column":4}}},"code":"gm.compare(originalJPGFilePath, originalPNGFilePath, function(err, same) {\n    if (err) return finish(err);\n    if (!same) return finish(new Error('Compare should be the same!'));\n\n    // Compare almost similar images for which ImageMagick\n    // returns a exponent-style floating point number\n    const compare1Path = path.join(__dirname, 'fixtures', 'compare_1.png');\n    const compare2Path = path.join(__dirname, 'fixtures', 'compare_2.png');\n\n    gm.compare(compare1Path, compare2Path, function(err, same, diff) {\n      if (err) return finish(err);\n      if (!same) return finish(new Error('Compare should be the same!'));\n\n      // Create a new noisy image\n      const noisePath = path.join(dir, 'noise3.png');\n      gm.noise(0.3).write(noisePath, function (err) {\n        if (err) return finish(err);\n\n        const options = {\n          highlightColor: 'yellow',\n          file: path.join(dir, `compare-test-${Date.now()}.png`),\n          tolerance: 0.001\n        };\n\n        // Compare these images and write to a file.\n        gm.compare(originalJPGFilePath, noisePath, options, function(err) {\n          if (err) return finish(err);\n\n          fs.access(options.file, fs.constants.F_OK, function(err) {\n            if (err) {\n              finish(new Error('Diff file does not exist.'));\n            } else {\n              fs.unlink(options.file, () => finish());\n            }\n          });\n        });\n      });\n    });\n  })","entryPoint":["require('..')","()",".options","()",".compare","()"]},"codeFlow":[{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/lib/compare.js","region":{"start":{"line":47,"column":11},"end":{"line":47,"column":23}}},"code":"appPath + bin","type":"binary","name":"Right","values":["compare"]}],"sink":{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/node_modules/cross-spawn/index.js","region":{"start":{"line":17,"column":15},"end":{"line":17,"column":67}}},"code":"cp.spawn(parsed.command, parsed.args, parsed.options)","module":"node:child_process"}},{"source":{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/lib/compare.js","region":{"start":{"line":26,"column":36},"end":{"line":26,"column":56}}},"code":"this._options.appPath"},"entryPoint":{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/test/compare.js","region":{"start":{"line":9,"column":3},"end":{"line":47,"column":4}}},"code":"gm.compare(originalJPGFilePath, originalPNGFilePath, function(err, same) {\n    if (err) return finish(err);\n    if (!same) return finish(new Error('Compare should be the same!'));\n\n    // Compare almost similar images for which ImageMagick\n    // returns a exponent-style floating point number\n    const compare1Path = path.join(__dirname, 'fixtures', 'compare_1.png');\n    const compare2Path = path.join(__dirname, 'fixtures', 'compare_2.png');\n\n    gm.compare(compare1Path, compare2Path, function(err, same, diff) {\n      if (err) return finish(err);\n      if (!same) return finish(new Error('Compare should be the same!'));\n\n      // Create a new noisy image\n      const noisePath = path.join(dir, 'noise3.png');\n      gm.noise(0.3).write(noisePath, function (err) {\n        if (err) return finish(err);\n\n        const options = {\n          highlightColor: 'yellow',\n          file: path.join(dir, `compare-test-${Date.now()}.png`),\n          tolerance: 0.001\n        };\n\n        // Compare these images and write to a file.\n        gm.compare(originalJPGFilePath, noisePath, options, function(err) {\n          if (err) return finish(err);\n\n          fs.access(options.file, fs.constants.F_OK, function(err) {\n            if (err) {\n              finish(new Error('Diff file does not exist.'));\n            } else {\n              fs.unlink(options.file, () => finish());\n            }\n          });\n        });\n      });\n    });\n  })","entryPoint":["require('..')","()",".options","()",".compare"]},"codeFlow":[{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/lib/compare.js","region":{"start":{"line":47,"column":11},"end":{"line":47,"column":23}}},"code":"appPath + bin","type":"binary","name":"Right","values":["compare"]}],"sink":{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/node_modules/cross-spawn/index.js","region":{"start":{"line":17,"column":15},"end":{"line":17,"column":67}}},"code":"cp.spawn(parsed.command, parsed.args, parsed.options)","module":"node:child_process"}},{"source":{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/lib/compare.js","region":{"start":{"line":26,"column":36},"end":{"line":26,"column":56}}},"code":"this._options.appPath"},"entryPoint":{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/test/compare.js","region":{"start":{"line":9,"column":3},"end":{"line":47,"column":4}}},"code":"gm.compare(originalJPGFilePath, originalPNGFilePath, function(err, same) {\n    if (err) return finish(err);\n    if (!same) return finish(new Error('Compare should be the same!'));\n\n    // Compare almost similar images for which ImageMagick\n    // returns a exponent-style floating point number\n    const compare1Path = path.join(__dirname, 'fixtures', 'compare_1.png');\n    const compare2Path = path.join(__dirname, 'fixtures', 'compare_2.png');\n\n    gm.compare(compare1Path, compare2Path, function(err, same, diff) {\n      if (err) return finish(err);\n      if (!same) return finish(new Error('Compare should be the same!'));\n\n      // Create a new noisy image\n      const noisePath = path.join(dir, 'noise3.png');\n      gm.noise(0.3).write(noisePath, function (err) {\n        if (err) return finish(err);\n\n        const options = {\n          highlightColor: 'yellow',\n          file: path.join(dir, `compare-test-${Date.now()}.png`),\n          tolerance: 0.001\n        };\n\n        // Compare these images and write to a file.\n        gm.compare(originalJPGFilePath, noisePath, options, function(err) {\n          if (err) return finish(err);\n\n          fs.access(options.file, fs.constants.F_OK, function(err) {\n            if (err) {\n              finish(new Error('Diff file does not exist.'));\n            } else {\n              fs.unlink(options.file, () => finish());\n            }\n          });\n        });\n      });\n    });\n  })","entryPoint":["require('..')","()",".options","()",".compare"]},"codeFlow":[{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/lib/command.js","region":{"start":{"line":226,"column":11},"end":{"line":226,"column":23}}},"code":"appPath + bin","type":"binary","name":"Right","values":["convert"]}],"sink":{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/node_modules/cross-spawn/index.js","region":{"start":{"line":17,"column":15},"end":{"line":17,"column":67}}},"code":"cp.spawn(parsed.command, parsed.args, parsed.options)","module":"node:child_process"}},{"source":{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/lib/compare.js","region":{"start":{"line":26,"column":36},"end":{"line":26,"column":56}}},"code":"this._options.appPath"},"entryPoint":{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/test/compare.js","region":{"start":{"line":9,"column":3},"end":{"line":47,"column":4}}},"code":"gm.compare(originalJPGFilePath, originalPNGFilePath, function(err, same) {\n    if (err) return finish(err);\n    if (!same) return finish(new Error('Compare should be the same!'));\n\n    // Compare almost similar images for which ImageMagick\n    // returns a exponent-style floating point number\n    const compare1Path = path.join(__dirname, 'fixtures', 'compare_1.png');\n    const compare2Path = path.join(__dirname, 'fixtures', 'compare_2.png');\n\n    gm.compare(compare1Path, compare2Path, function(err, same, diff) {\n      if (err) return finish(err);\n      if (!same) return finish(new Error('Compare should be the same!'));\n\n      // Create a new noisy image\n      const noisePath = path.join(dir, 'noise3.png');\n      gm.noise(0.3).write(noisePath, function (err) {\n        if (err) return finish(err);\n\n        const options = {\n          highlightColor: 'yellow',\n          file: path.join(dir, `compare-test-${Date.now()}.png`),\n          tolerance: 0.001\n        };\n\n        // Compare these images and write to a file.\n        gm.compare(originalJPGFilePath, noisePath, options, function(err) {\n          if (err) return finish(err);\n\n          fs.access(options.file, fs.constants.F_OK, function(err) {\n            if (err) {\n              finish(new Error('Diff file does not exist.'));\n            } else {\n              fs.unlink(options.file, () => finish());\n            }\n          });\n        });\n      });\n    });\n  })","entryPoint":["require('..')","()",".options","()",".compare"]},"codeFlow":[{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/lib/compare.js","region":{"start":{"line":47,"column":11},"end":{"line":47,"column":23}}},"code":"appPath + bin","type":"binary","name":"Right","values":["compare"]}],"sink":{"location":{"artifact":"/home/pmoosi/Documents/KTH/2023-ss/thesis/the-tool/pipeline/packages/gm/node_modules/cross-spawn/index.js","region":{"start":{"line":17,"column":15},"end":{"line":17,"column":67}}},"code":"cp.spawn(parsed.command, parsed.args, parsed.options)","module":"node:child_process"}}]